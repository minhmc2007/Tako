name: Build and Release Tako

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write # Required to create a release and upload assets

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x86_64
            output: tako
          - os: ubuntu-latest
            target: linux-arm64
            output: tako
          - os: windows-latest
            target: windows-x86_64
            output: tako.exe
          - os: macos-13
            target: macos-x86_64
            output: tako
          - os: macos-latest
            target: macos-arm64
            output: tako

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup cross-compilation for Linux ARM64
      if: matrix.target == 'linux-arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Setup MSYS2 for Windows
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: mingw-w64-x86_64-gcc make

    - name: Build on Linux/macOS
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        make clean
        if [[ "${{ matrix.target }}" == "linux-arm64" ]]; then
          CC=aarch64-linux-gnu-gcc make
        else
          make
        fi

    - name: Build on Windows
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        make clean
        make

    - name: Test executable on Linux/macOS (native builds)
      if: (runner.os == 'Linux' && matrix.target == 'linux-x86_64') || runner.os == 'macOS'
      run: |
        ./${{ matrix.output }} examples/hello.tako || echo "Test completed (non-zero exit code ignored)"

    - name: Test executable on Windows
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        ./${{ matrix.output }} examples/hello.tako || echo "Test completed (non-zero exit code ignored)"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: tako-${{ matrix.target }}
        path: ${{ matrix.output }}
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Tako Release ${{ github.ref_name }}
        draft: false
        prerelease: true

    - name: Upload all release assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_REPO: ${{ github.repository }}
      run: |
        # Loop through each artifact directory downloaded in the previous step
        for dir in artifacts/*; do
          # Get the name of the directory (e.g., "tako-linux-x86_64")
          asset_base_name=$(basename "$dir")
          # Find the binary file inside the directory
          file_path=$(find "$dir" -type f)
          
          # Construct the final asset name. For Windows, append ".exe"
          if [[ "$file_path" == *.exe ]]; then
            asset_name="${asset_base_name}.exe"
          else
            asset_name="${asset_base_name}"
          fi
          
          echo "Uploading '$file_path' as asset '$asset_name'..."
          # CORRECTED SYNTAX: Use a '#' to specify the asset name.
          gh release upload ${{ github.ref_name }} "${file_path}#${asset_name}" --clobber
        done
