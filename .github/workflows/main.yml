name: Build and Release Tako

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write # Required to create a release and upload assets

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Continue other matrix jobs even if one fails
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: linux-x86_64
            output: tako
          - os: ubuntu-latest
            target: linux-arm64
            output: tako

          # Windows builds
          - os: windows-latest
            target: windows-x86_64
            output: tako.exe

          # macOS builds
          - os: macos-13  # Intel runner
            target: macos-x86_64
            output: tako
          - os: macos-latest  # ARM64 runner (currently macos-14)
            target: macos-arm64
            output: tako

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # --- Setup Steps ---
    - name: Setup cross-compilation for Linux ARM64
      if: matrix.target == 'linux-arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Setup MSYS2 for Windows
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: mingw-w64-x86_64-gcc make # Installs 'gcc' and 'make'

    # --- Build Steps ---
    - name: Build on Linux/macOS
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        make clean
        # For cross-compilation, specify the C compiler
        if [[ "${{ matrix.target }}" == "linux-arm64" ]]; then
          CC=aarch64-linux-gnu-gcc make
        else
          make
        fi

    - name: Build on Windows
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        # CORRECTED: Use 'make', not 'mingw32-make'
        make clean
        make

    # --- Test Steps (for native builds only) ---
    - name: Test executable on Linux/macOS (native builds)
      # We can only run tests on native builds, not cross-compiled ones
      if: (runner.os == 'Linux' && matrix.target == 'linux-x86_64') || runner.os == 'macOS'
      run: |
        echo "Testing ${{ matrix.output }} with example file..."
        # This command suppresses errors. If a non-zero exit code is expected,
        # consider a more specific check like:
        # if ! ./${{ matrix.output }} examples/hello.tako; then echo "Test passed as expected"; else exit 1; fi
        ./${{ matrix.output }} examples/hello.tako || echo "Test completed (non-zero exit code ignored)"

    - name: Test executable on Windows
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        echo "Testing ${{ matrix.output }} with example file..."
        ./${{ matrix.output }} examples/hello.tako || echo "Test completed (non-zero exit code ignored)"

    # --- Artifact Upload ---
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: tako-${{ matrix.target }} # e.g., tako-linux-x86_64
        path: ${{ matrix.output }}
        retention-days: 1 # Keep artifacts for 1 day

  release:
    # This job runs only if all build jobs succeed
    needs: build
    runs-on: ubuntu-latest
    # CRITICAL: Run this job only when a tag is pushed
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts # Download all artifacts into an "artifacts" directory

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Tako Release ${{ github.ref_name }}
        draft: false
        prerelease: true # Mark as pre-release

    - name: Upload all release assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_REPO: ${{ github.repository }}
      run: |
        # Use the GitHub CLI to upload all binaries from the downloaded artifact directories.
        # This is robust and automatically handles any changes to the build matrix.
        # The glob pattern finds all files inside the artifact subdirectories (e.g., artifacts/tako-linux-x86_64/tako)
        gh release upload ${{ github.ref_name }} artifacts/**/* --clobber
